#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import requests
import argparse
import logging
import urllib3

from settings.local import API_EARL
from settings.local import USERNAME
from settings.local import PASSWORD
from settings.local import LOGIN_ENDPOINT
from settings.local import REPORTS_ENDPOINT
from settings.local import IP4LOGS_ENDPOINT
from settings.local import NODE_ENDPOINT
from settings.local import LOGFILE

# initialise the logger
logger = logging.getLogger('__main__')
hdlr = logging.FileHandler(LOGFILE)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)

# set up command-line options
desc = """
    Accepts as input:
      --destination IPv4 address
      --source IPv4 address
      --action
      --alert
      --a security event ID
    Add --test for logging
"""

# RawTextHelpFormatter method allows for new lines in help text
parser = argparse.ArgumentParser(
    description=desc, formatter_class=argparse.RawTextHelpFormatter
)

parser.add_argument(
    '-d', '--dip',
    required=True,
    help="IPv4 destination address",
    dest='dip'
)
parser.add_argument(
    '-s', '--sip',
    required=True,
    help="IPv4 source address",
    dest='sip'
)
parser.add_argument(
    '-a', '--action',
    required=True,
    help="Security action e.g. apply_security_event",
    dest='action'
)
parser.add_argument(
    '-l', '--alert',
    required=True,
    help="Security alert e.g. MALWARE",
    dest='alert'
)
parser.add_argument(
    '-i', '--sid',
    required=True,
    help="Security event ID e.g. 2000000",
    dest='sid'
)
parser.add_argument(
    '--test',
    action='store_true',
    help="Dry run?",
    dest='test'
)


def get_token():
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json'
    }
    params = dict(
        username=USERNAME,
        password=PASSWORD
    )
    url = API_EARL + LOGIN_ENDPOINT
    resp = requests.post(
        url=url, data=json.dumps(params), headers=headers, verify=False
    )
    if test:
        logger.info('get_token() response: {0}'.format(
            resp.content.decode('utf-8')
        ))

    return json.loads(resp.content.decode('utf-8'))['token']


def main():
    """Set a security alert on a mac based on IPv4 address."""
    # disable warning about unverified HTTPS requests
    urllib3.disable_warnings()

    token = get_token()
    if test:
        logger.info('token = {0}'.format(token))

    headers = dict(
        accept='application/json', Authorization=token
    )
    if test:
        logger.info('requests headers = {0}'.format(headers))

    for ip in (sip, dip):
        url = '{0}{1}/ip2mac/{2}'.format(
            API_EARL, IP4LOGS_ENDPOINT, ip
        )
        if test:
            logger.info('ip2mac URL = {0}'.format(url))
        resp = requests.get(url=url, headers=headers, verify=False)
        data = resp.json()
        mac = data['mac']
        if test:
            logger.info('json data from ip2mac request = {0}'.format(data))

        if mac:
            data = '{{"security_event_id": "{0}", "mac": "{1}"}}'.format(sid, mac)
            if test:
                logger.info('POST json data = {0}'.format(data))
            url = '{0}{1}/{2}/{3}'.format(
                API_EARL, NODE_ENDPOINT, mac, action,
            )
            if test:
                logger.info('node endpoint url = {0}'.format(url))
                logger.info('IP: {0}'.format(ip))
                logger.info('MAC: {0}'.format(mac))
                logger.info('alert: {0}'.format(alert))
            else:
                resp = requests.post(
                    url=url, headers=headers, data=data, verify=False
                )
                data = resp.json()
                logger.info('production run')
                logger.info('POST json data = {0}'.format(data))
                logger.info('node endpoint url = {0}'.format(url))
                logger.info('IP: {0}'.format(ip))
                logger.info('MAC: {0}'.format(mac))
                logger.info('alert: {0}'.format(alert))
                logger.info('dip: {0}'.format(dip))
                logger.info('sip: {0}'.format(sip))


if __name__ == '__main__':
    args = parser.parse_args()
    dip = args.dip
    sip = args.sip
    sid = args.sid
    action = args.action
    alert = args.alert
    test = args.test

    if test:
        logger.info('args = {0}'.format(args))

    if action in ['apply_security_event']:
        if sid in ['2000000']:
            sys.exit(main())
        else:
            logger.info('security event ID is not valid')
            sys.exit()
    else:
        logger.info('action value is not valid')
        sys.exit()
