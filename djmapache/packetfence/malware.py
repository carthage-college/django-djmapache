#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import requests
import argparse
import logging
import urllib3

API_EARL = ''
USERNAME = ''
PASSWORD = ''
LOGIN_ENDPOINT = ''
REPORTS_ENDPOINT = ''
IP4LOGS_ENDPOINT = ''
NODE_ENDPOINT = ''

# initialise the logger
logger = logging.getLogger('__main__')
#hdlr = logging.FileHandler('/etc/elastalert/rules/packetfence.log')
hdlr = logging.FileHandler('logs/packetfence.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)

# set up command-line options
desc = """
    Accepts as input an IPv4 address, a security event ID, and an action to take.
"""

# RawTextHelpFormatter method allows for new lines in help text
parser = argparse.ArgumentParser(
    description=desc, formatter_class=argparse.RawTextHelpFormatter
)

parser.add_argument(
    '-i', '--ip',
    required=True,
    help="IPv4 address",
    dest='ip'
)
parser.add_argument(
    '-a', '--action',
    required=True,
    help="Security action e.g. apply_security_event",
    dest='action'
)
parser.add_argument(
    '-s', '--sid',
    required=True,
    help="Security event ID e.g. 2000000",
    dest='sid'
)
parser.add_argument(
    '--test',
    action='store_true',
    help="Dry run?",
    dest='test'
)


def get_token():
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json'
    }
    params = dict(
        username=USERNAME,
        password=PASSWORD
    )
    url = API_EARL + LOGIN_ENDPOINT
    resp = requests.post(
        url=url, data=json.dumps(params), headers=headers, verify=False
    )
    if test:
        print(resp.content.decode('utf-8'))

    return json.loads(resp.content.decode('utf-8'))['token']


def main():
    """Obtain a mac address based on IPv4 address."""
    print('spark it up')
    # disable warning about unverified HTTPS requests
    urllib3.disable_warnings()

    token = get_token()
    if test:
        print(token)

    headers = dict(
        accept='application/json', Authorization=token
    )
    if test:
        print(headers)
    url = '{0}{1}/ip2mac/{2}'.format(
        API_EARL, IP4LOGS_ENDPOINT, ip
    )
    if test:
        print(url)
    resp = requests.get(url=url, headers=headers, verify=False)
    data = resp.json()
    if test:
        print(data)

    if data['mac']:
        mac = data['mac']
        data = '{{"security_event_id": "{0}", "mac": "{1}"}}'.format(sid, mac)
        if test:
            print(data)
        url = '{0}{1}/{2}/{3}'.format(
            API_EARL, NODE_ENDPOINT, mac, action,
        )
        if test:
            print(url)
        '''
        resp = requests.post(url=url, headers=headers, data=data, verify=False)
        data = resp.json()
        if test:
            print(data)
            print('logging...')
        '''

        logger.info("IP: {0}".format(ip))
        logger.info("MAC: {0}".format(mac))



if __name__ == "__main__":
    args = parser.parse_args()
    ip = args.ip
    sid = args.sid
    action = args.action
    test = args.test

    if test:
        print(args)

    if action in ['apply_security_event']:
        if sid in ['2000000']:
            sys.exit(main())
        else:
            print('security event ID is not valid')
            exit(-1)
    else:
        print('action value is not valid')
        exit(-1)
