#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json
import logging
import sys

import requests
import urllib3

from settings.local import API_EARL
from settings.local import IP4LOGS_ENDPOINT
from settings.local import LOGFILE
from settings.local import LOGIN_ENDPOINT
from settings.local import NODE_ENDPOINT
from settings.local import PASSWORD
from settings.local import USERNAME


# initialise the logger
logger = logging.getLogger('__main__')
hdlr = logging.FileHandler(LOGFILE)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)

# set up command-line options
desc = """
    Accepts as input:
      --destination IPv4 address
      --source IPv4 address
      --action
      --alert
      --a security event ID
    Add --test for logging
"""

# RawTextHelpFormatter method allows for new lines in help text
parser = argparse.ArgumentParser(
    description=desc, formatter_class=argparse.RawTextHelpFormatter,
)

parser.add_argument(
    '-d',
    '--dip',
    required=True,
    help="IPv4 destination address",
    dest='dip',
)
parser.add_argument(
    '-s',
    '--sip',
    required=True,
    help="IPv4 source address",
    dest='sip',
)
parser.add_argument(
    '-a',
    '--action',
    required=True,
    help="Security action e.g. apply_security_event",
    dest='action',
)
parser.add_argument(
    '-l',
    '--alert',
    required=True,
    help="Security alert e.g. MALWARE",
    dest='alert',
)
parser.add_argument(
    '-i',
    '--sid',
    required=True,
    help="Security event ID e.g. 2000000",
    dest='sid',
)
parser.add_argument(
    '--test',
    action='store_true',
    help="Dry run?",
    dest='test',
)


def get_token():
    """Obtain the API authentication token."""
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }
    authentication = {
        'username': USERNAME,
        'password': PASSWORD,
    }
    url = API_EARL + LOGIN_ENDPOINT
    resp = requests.post(
        url=url, data=json.dumps(authentication), headers=headers, verify=False,
    )
    if test:
        logger.info('get_token() response: %s', resp.content.decode('utf-8'))

    return json.loads(resp.content.decode('utf-8'))['token']


def main():
    """Set a security alert on a mac based on IPv4 address."""
    # disable warning about unverified HTTPS requests
    urllib3.disable_warnings()

    token = get_token()
    if test:
        logger.info('token = %s', token)

    headers = {
        'accept': 'application/json', 'Authorization': token,
    }
    if test:
        logger.info('requests headers = %s', headers)

    for ip in (sip, dip):
        url = '{0}{1}/ip2mac/{2}'.format(
            API_EARL, IP4LOGS_ENDPOINT, ip,
        )
        if test:
            logger.info('ip2mac URL = %s', url)
        resp = requests.get(url=url, headers=headers, verify=False)
        json_ip2mac = resp.json()
        mac = json_ip2mac['mac']
        if test:
            logger.info('json data from ip2mac request = %s', json_ip2mac)

        if mac:
            json_data = '{{"security_event_id": "{0}", "mac": "{1}"}}'.format(sid, mac)
            if test:
                logger.info('POST json data = %s', json_data)
            url = '{0}{1}/{2}/{3}'.format(
                API_EARL, NODE_ENDPOINT, mac, action,
            )
            if test:
                logger.info('node endpoint url = %s', url)
                logger.info('IP: %s', ip)
                logger.info('MAC: %s', mac)
                logger.info('alert: %s', alert)
            else:
                resp = requests.post(
                    url=url, headers=headers, data=json_data, verify=False,
                )
                json_response = resp.json()
                logger.info('production run')
                logger.info('POST json response = %s', json_response)
                logger.info('node endpoint url = %s', url)
                logger.info('IP: %s', ip)
                logger.info('MAC: %s', mac)
                logger.info('alert: %s', alert)
                logger.info('dip: %s', dip)
                logger.info('sip: %s', sip)


if __name__ == '__main__':
    args = parser.parse_args()
    dip = args.dip
    sip = args.sip
    sid = args.sid
    action = args.action
    alert = args.alert
    test = args.test

    if test:
        logger.info('args = %s', args)

    if action == 'apply_security_event':
        if sid in {'2000000', '2000001'}:
            sys.exit(main())
        else:
            logger.info('security event ID is not valid')
            sys.exit()
    else:
        logger.info('action value is not valid')
        sys.exit()
